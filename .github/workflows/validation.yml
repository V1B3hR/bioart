name: Validation Checklist

on:
  workflow_dispatch:  # Manual trigger
    inputs:
      python_version:
        description: 'Python version to use'
        required: false
        default: '3.11'
        type: choice
        options:
          - '3.10'
          - '3.11'
  pull_request:
    paths:
      - 'src/**'
      - 'tests/**'
      - 'examples/**'
      - 'docs/VALIDATION_CHECKLIST.md'
      - 'docs/Makefile'
      - 'Makefile'
      - '.github/workflows/validation.yml'
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'examples/**'
      - 'docs/VALIDATION_CHECKLIST.md'
      - 'docs/Makefile'
      - 'Makefile'
      - '.github/workflows/validation.yml'

# Permissions for the workflow
permissions:
  contents: read
  actions: read

# Avoid concurrent runs for the same ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHONUNBUFFERED: 1

jobs:
  validation:
    name: Run Validation Checklist
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Need full git history for commit info
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python_version || '3.11' }}
          cache: pip
          cache-dependency-path: |
            requirements.txt
            dev-requirements.txt

      - name: Install Python and upgrade pip
        run: |
          python -m pip install --upgrade pip

      - name: Install optional validation tools (best-effort)
        run: |
          echo "Installing optional validation tools..."
          pip install pytest coverage ruff mypy bandit || {
            echo "⚠️ Some validation tools failed to install, continuing with available tools..."
            exit 0
          }

      - name: Display environment information
        run: |
          echo "=== Environment Information ==="
          python -V
          python -c "import platform,sys;print('Platform:', platform.platform());print('Python:', sys.version)"
          git rev-parse HEAD
          echo "Working directory: $(pwd)"
          echo "Available tools:"
          command -v pytest && echo "✓ pytest available" || echo "✗ pytest not available"
          command -v coverage && echo "✓ coverage available" || echo "✗ coverage not available"
          command -v ruff && echo "✓ ruff available" || echo "✗ ruff not available"
          command -v mypy && echo "✓ mypy available" || echo "✗ mypy not available"
          command -v bandit && echo "✓ bandit available" || echo "✗ bandit not available"

      - name: Execute validation target
        run: |
          echo "=== Running Validation Target ==="
          
          # Try docs/Makefile first (preferred), then fallback to root Makefile
          if make -f docs/Makefile validate-artifacts; then
            echo "✅ Validation completed using docs/Makefile"
          elif make validate-artifacts 2>/dev/null; then
            echo "✅ Validation completed using root Makefile"
          else
            echo "❌ Validation target failed or not found"
            echo "Attempting manual validation steps as fallback..."
            
            # Manual fallback - create basic artifacts structure
            mkdir -p artifacts/{env,tests,coverage,benchmarks,demos,workflows,docs}
            
            # Capture environment
            python -V | tee artifacts/env/python_version.txt
            python -c "import platform,sys;print(platform.platform());print(sys.version)" | tee artifacts/env/system.txt
            git rev-parse HEAD | tee artifacts/env/commit.txt
            git status --porcelain | tee artifacts/env/status.txt
            python -m pip freeze 2>/dev/null | tee artifacts/env/pip_freeze.txt || true
            
            # Run basic demos and tests
            echo "Running basic validation steps..."
            if [ -f examples/dna_demo.py ]; then
              python examples/dna_demo.py | tee artifacts/demos/dna_demo.log || true
            fi
            if [ -f examples/ai_poc_validation_demo.py ]; then
              python examples/ai_poc_validation_demo.py | tee artifacts/demos/ai_poc_validation_demo.log || true
            fi
            if [ -f run_tests.py ]; then
              python run_tests.py | tee artifacts/tests/run_tests.log || true
            fi
            if [ -f tests/stress_tests.py ]; then
              python tests/stress_tests.py | tee artifacts/tests/stress_tests.log || true
            fi
            
            # Create RESULTS.md template
            SHA=$(git rev-parse HEAD)
            cat > artifacts/RESULTS.md << EOF
          # Validation Results (Commit: $SHA)
          
          ## Environment
          - OS / CPU / Python: see artifacts/env/system.txt and python_version.txt
          - Seeds: (record any fixed seeds used)
          
          ## Tests & Coverage
          - run_tests: see artifacts/tests/run_tests.log
          - coverage: see artifacts/coverage/ (if generated)
          
          ## Encoding Round-trip
          - Files tested: (list files)
          - SHA-256 match: yes/no (attach sha_before/after)
          
          ## Performance
          - Dataset: (describe)
          - MB/s: mean (std)
          - Methodology: see artifacts/benchmarks/*
          
          ## Biological ECC & Quantum ECC
          - Params: (list)
          - Improvement: (quantify)
          - QECC overhead: (from demo logs)
          
          ## ML Optimization
          - Objective: (e.g., GC content)
          - Improvement: (quantify)
          - Metrics: see artifacts/demos/ml_metrics.csv if created
          
          ## Workflow & Synthesis
          - Workflow success: yes/no
          - Monitoring output: summary (attach)
          - Synthesis adapter: mock/live, results (attach)
          
          ## Documentation Conformance
          - Variances: (list any mismatches found)
          
          ## Conclusion
          - Overall: Pass/Fail
          - Notes: (follow-ups, issues)
          EOF
            
            echo "✅ Manual validation fallback completed"
          fi

      - name: Generate coverage report (if pytest/coverage available)
        run: |
          if command -v coverage >/dev/null && command -v pytest >/dev/null; then
            echo "=== Generating Coverage Report ==="
            mkdir -p artifacts/coverage
            
            # Run coverage with pytest if tests exist
            if [ -d tests/ ] && find tests/ -name "*.py" -type f | grep -q .; then
              coverage run -m pytest tests/ --tb=short || {
                echo "⚠️ Some tests failed, but continuing to generate coverage report..."
              }
              coverage html -d artifacts/coverage/html || true
              coverage xml -o artifacts/coverage/coverage.xml || true
              coverage report || true
            else
              echo "No pytest-compatible tests found, skipping coverage"
            fi
          else
            echo "coverage/pytest not available, skipping coverage report"
          fi

      - name: Verify artifacts directory structure
        run: |
          echo "=== Artifacts Directory Structure ==="
          if [ -d artifacts ]; then
            find artifacts -type f | head -20
            echo ""
            if [ -f artifacts/RESULTS.md ]; then
              echo "✅ RESULTS.md found"
              echo "First few lines:"
              head -10 artifacts/RESULTS.md
            else
              echo "❌ RESULTS.md not found"
            fi
          else
            echo "❌ artifacts directory not found"
            exit 1
          fi

      - name: Upload validation artifacts
        uses: actions/upload-artifact@v4
        if: always()  # Always upload artifacts even if previous steps failed
        with:
          name: validation-artifacts
          path: artifacts/
          if-no-files-found: warn
          retention-days: 30